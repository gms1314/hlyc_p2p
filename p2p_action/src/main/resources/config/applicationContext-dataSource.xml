<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- 连接池配置 -->
	
	
	
	<bean id="dataSourceDruid" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
       <!-- 基本属性 url username password driverClassName-->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <!--<property name="driverClassName" value="${jdbc.driver}" />-->

        <!--配置初始化大小、最小、最多连接数-->
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="100" />
        <property name="minIdle" value="5" />

        <!--配置获取连接等待超时时间-->
        <property name="maxWait" value="3000"/>

        <!--配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="6000"/>

        <!--配置一个连接在连接池中，最小生存的时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="30000"/>

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!--打开PSCache，并且指定每个连接上的PSCache的大小-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />

    </bean>


	<!-- spring 整合 JPA配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 连接池 -->
		<property name="dataSource" ref="dataSourceDruid" />
		<!-- 加载jpa注解类 -->
		<property name="packagesToScan">
			<list>
				<value>cn.hlyc.domain</value>
			</list>
		</property>

		<!-- JPA方言 如果配置了jpaVendorAdapter，这项可以不配置 <property name="jpaDialect"> <bean 
			class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" /> </property> -->

		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 数据库类型 -->
				<property name="database" value="ORACLE" />
				<!-- hibernate方言 -->
				<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />
				<!-- 自动建表 -->
				<property name="generateDdl" value="true" />
				<!-- 控制台打印SQL语句 -->
				<property name="showSql" value="true" />
			</bean>
		</property>
		<!-- jpa使用hibernate实现 <property name="persistenceProvider"> <bean class="org.hibernate.ejb.HibernatePersistence"></bean> 
			</property> -->
	</bean>

	<jpa:repositories base-package="cn.hlyc.dao"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

</beans>